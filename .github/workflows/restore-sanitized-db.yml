name: Restore Sanitized DB

concurrency: stage

on:
  push:
    branches: 
      - db-actions
  workflow_dispatch:
  workflow_call:

jobs:
  sanitize-db:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Run default MySQL instance
        run: docker run --rm --detach --publish 3306:3306 --env MYSQL_ROOT_PASSWORD=root --name mysql --platform linux/amd64 mysql:5.7

      - name: Download DB backup
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: backup-db.yml
          workflow_conclusion: success
          check_artifacts: true

      - name: Unzip artifact & load DB
        env:
          BACKUP_PASSWORD: ${{ secrets.BACKUP_PASSWORD }}
        run: |
          cd `ls -t | head -n 1`
          unzip -P $BACKUP_PASSWORD `ls -t | head -n 1`
          cat `ls -t *.sql | head -n 1` | docker exec -i mysql /usr/bin/mysql -u root -proot

      - name: Remove PII
        run: |
          cat <<EOF | docker exec -i mysql /usr/bin/mysql -u root --password=root
          delete from invites;
          delete from user_webpush;
          update users set email='user@example.com';
          EOF

      - name: Dump database
        run:  docker exec -i mysql mysqldump --default-character-set=utf8mb4 --single-transaction --add-drop-database --databases orbitar_db activity_db -u root -proot > stage-backup.sql
      
      - name: Compress database
        env:
          BACKUP_PASSWORD: ${{ secrets.STAGING_BACKUP_PASSWORD }}
        run: zip -m -P $STAGING_BACKUP_PASSWORD stage-backup.zip stage-backup.sql

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: stage-backup
          path: stage-backup.zip
          if-no-files-found: error

      - name: Stop MySQL instance
        run: docker stop mysql

  restore-db:
    needs: sanitize-db
    environment: Staging
    runs-on: [self-hosted, stage]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: stage-backup

      - name: Unzip backup
        env:
          BACKUP_PASSWORD: ${{ secrets.BACKUP_PASSWORD }}
        run: |
          unzip -P $BACKUP_PASSWORD `ls -t | head -n 1`
          cat `ls -t *.sql | head -n 1` | docker exec -i mysql /usr/bin/mysql -u root --password=root

      - name: Stop backend
        run: docker-compose -f /orbitar/docker-compose.yml stop backend

      - name: Restore backup
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: docker-compose -f /orbitar/docker-compose.yml exec -T mysql /usr/bin/mysql -u root --password=$MYSQL_ROOT_PASSWORD --default-character-set=utf8mb4 < `ls -t *.sql | head -n 1`

      - name: Restart backend
        run: docker-compose -f /orbitar/docker-compose.yml start backend

  # backup-db:
  #   runs-on: [self-hosted, prod]
  #   environment: Production
  #   steps:
  #     - name: Set backup name
  #       run: echo "backupFileName=${HOSTNAME}_$(date +%Y-%m-%d_%H-%M-%S)_dump.sql" >> $GITHUB_ENV

  #     - name: Dump database
  #       env:
  #         MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  #       run: docker-compose -f /orbitar/docker-compose.yml exec -T mysql mysqldump --default-character-set=utf8mb4 --single-transaction --add-drop-database --databases orbitar_db activity_db -u root -p$MYSQL_ROOT_PASSWORD > ${{ env.backupFileName }}
      
  #     - name: Compress database
  #       env:
  #         BACKUP_PASSWORD: ${{ secrets.BACKUP_PASSWORD }}
  #       run: zip -m -P $BACKUP_PASSWORD ${{ env.backupFileName }}.zip ${{ env.backupFileName }}

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ env.backupFileName }}
  #         path: ${{ env.backupFileName }}.zip
  #         if-no-files-found: error